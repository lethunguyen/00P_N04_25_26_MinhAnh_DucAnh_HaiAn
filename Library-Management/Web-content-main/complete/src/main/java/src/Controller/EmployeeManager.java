package src.Database;

import io.github.cdimascio.dotenv.Dotenv;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {

    // single-ton Connection
    private static Connection connection = null;

    // L·∫•y th√¥ng tin t·ª´ .env (Dotenv s·∫Ω ƒë·ªçc file .env ·ªü project root)
    private static String getEnv(String key) {
        Dotenv dotenv = Dotenv.configure()
                .ignoreIfMissing() // tr√°nh n√©m n·∫øu .env kh√¥ng t·ªìn t·∫°i (d√πng fallback)
                .load();
        return dotenv.get(key);
    }

    public static Connection getConnection() {
        if (connection != null) {
            return connection;
        }

        try {
            String url = getEnv("DB_URL");
            String user = getEnv("DB_USER");
            String pass = getEnv("DB_PASSWORD");

            // fallback m·∫∑c ƒë·ªãnh (ch·ªâ d√πng khi .env kh√¥ng c√≥) ‚Äî an to√†n cho dev
            if (url == null || url.isEmpty()) {
                url = "jdbc:mysql://localhost:3306/librarydb";
            }
            if (user == null) {
                user = "root";
            }
            if (pass == null) {
                pass = "";
            }

            // ƒë·∫£m b·∫£o driver ƒë∆∞·ª£c load (JDBC 4+ t·ª± load, nh∆∞ng g·ªçi r√µ r√†ng kh√¥ng h·∫°i)
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
            } catch (ClassNotFoundException ignored) {
                // n·∫øu kh√¥ng t√¨m th·∫•y driver th√¨ DriverManager s·∫Ω n√©m SQLException sau ƒë√≥
            }

            connection = DriverManager.getConnection(url, user, pass);
            System.out.println("‚úÖ DatabaseConnection: connected to DB (" + url + ")");
            return connection;

        } catch (SQLException e) {
            // n√©m runtime ƒë·ªÉ c√°c l·ªõp ph√≠a tr√™n c√≥ th·ªÉ x·ª≠ l√Ω v√† in th√¥ng b√°o r√µ r√†ng
            throw new RuntimeException("‚ùå DatabaseConnection: failed to connect - " + e.getMessage(), e);
        } catch (Exception e) {
            throw new RuntimeException("‚ùå DatabaseConnection: unexpected error - " + e.getMessage(), e);
        }
    }

    public static void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            connection = null;
            System.out.println("üîí DatabaseConnection: connection closed");
        } catch (SQLException e) {
            System.err.println("‚ö†Ô∏è DatabaseConnection: error closing connection - " + e.getMessage());
        }
    }
}
